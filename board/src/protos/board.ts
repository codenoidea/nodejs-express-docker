// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.27.0
// source: src/protos/board.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "boardPackage";

/** 결과 코드 */
export enum ResultCode {
  SUCCESS = 0,
  FAIL = 1,
  UNRECOGNIZED = -1,
}

export function resultCodeFromJSON(object: any): ResultCode {
  switch (object) {
    case 0:
    case "SUCCESS":
      return ResultCode.SUCCESS;
    case 1:
    case "FAIL":
      return ResultCode.FAIL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ResultCode.UNRECOGNIZED;
  }
}

export function resultCodeToJSON(object: ResultCode): string {
  switch (object) {
    case ResultCode.SUCCESS:
      return "SUCCESS";
    case ResultCode.FAIL:
      return "FAIL";
    case ResultCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 결과 */
export interface BoardResult {
  resultCode: ResultCode;
}

/** 생성 */
export interface BoardCreate {
  title: string;
  content: string;
  userId?: string | undefined;
}

function createBaseBoardResult(): BoardResult {
  return { resultCode: 0 };
}

export const BoardResult = {
  encode(message: BoardResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resultCode !== 0) {
      writer.uint32(8).int32(message.resultCode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BoardResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoardResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.resultCode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoardResult {
    return { resultCode: isSet(object.resultCode) ? resultCodeFromJSON(object.resultCode) : 0 };
  },

  toJSON(message: BoardResult): unknown {
    const obj: any = {};
    if (message.resultCode !== 0) {
      obj.resultCode = resultCodeToJSON(message.resultCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BoardResult>, I>>(base?: I): BoardResult {
    return BoardResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BoardResult>, I>>(object: I): BoardResult {
    const message = createBaseBoardResult();
    message.resultCode = object.resultCode ?? 0;
    return message;
  },
};

function createBaseBoardCreate(): BoardCreate {
  return { title: "", content: "", userId: undefined };
}

export const BoardCreate = {
  encode(message: BoardCreate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.userId !== undefined) {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BoardCreate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoardCreate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BoardCreate {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,
    };
  },

  toJSON(message: BoardCreate): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BoardCreate>, I>>(base?: I): BoardCreate {
    return BoardCreate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BoardCreate>, I>>(object: I): BoardCreate {
    const message = createBaseBoardCreate();
    message.title = object.title ?? "";
    message.content = object.content ?? "";
    message.userId = object.userId ?? undefined;
    return message;
  },
};

/** 서비스 */
export type BoardServiceService = typeof BoardServiceService;
export const BoardServiceService = {
  create: {
    path: "/boardPackage.BoardService/create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BoardCreate) => Buffer.from(BoardCreate.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BoardCreate.decode(value),
    responseSerialize: (value: BoardResult) => Buffer.from(BoardResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BoardResult.decode(value),
  },
} as const;

export interface BoardServiceServer extends UntypedServiceImplementation {
  create: handleUnaryCall<BoardCreate, BoardResult>;
}

export interface BoardServiceClient extends Client {
  create(request: BoardCreate, callback: (error: ServiceError | null, response: BoardResult) => void): ClientUnaryCall;
  create(
    request: BoardCreate,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BoardResult) => void,
  ): ClientUnaryCall;
  create(
    request: BoardCreate,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BoardResult) => void,
  ): ClientUnaryCall;
}

export const BoardServiceClient = makeGenericClientConstructor(
  BoardServiceService,
  "boardPackage.BoardService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BoardServiceClient;
  service: typeof BoardServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
